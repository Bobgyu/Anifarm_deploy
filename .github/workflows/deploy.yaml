name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create SSH directory
        run: |
          mkdir -p ~/.ssh/
          chmod 700 ~/.ssh/

      - name: Store SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # EC2에 접속하여 디스크 공간 확보
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            # Docker 서비스 중지
            sudo systemctl stop docker || true
            sudo systemctl stop docker.socket || true
            
            # Docker 디렉토리 삭제 및 재생성
            sudo rm -rf /var/lib/docker
            sudo mkdir -p /var/lib/docker
            sudo chown -R root:root /var/lib/docker
            sudo chmod -R 711 /var/lib/docker
            
            # 스왑 파일 생성 및 활성화
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 8G /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
            fi
            
            # 시스템 정리
            sudo apt-get clean
            sudo apt-get autoremove -y
            sudo rm -rf /var/lib/apt/lists/*
            sudo rm -rf /var/cache/apt/archives/*
            sudo rm -rf /var/cache/apt/lists/*
            sudo rm -rf /var/tmp/*
            sudo rm -rf /tmp/*
            sudo rm -rf /var/log/*.gz
            sudo rm -rf /var/log/journal/*
            sudo rm -rf /var/cache/*
            
            # Docker 서비스 재시작
            sudo systemctl start docker
            
            # 디스크 공간 확인
            df -h
            free -h
          '

          # 애플리케이션 코드 전송
          scp -i ~/.ssh/id_rsa -o ConnectTimeout=10 -r . ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app_deploy/

          # EC2에서 Docker 이미지 빌드 및 실행
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            cd ~/app_deploy
            
            # 환경 변수 파일 생성
            echo "$ENV_FILE" > .env
            sudo chown ubuntu:ubuntu .env
            
            # 기존 컨테이너와 이미지 정리
            sudo docker stop $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true
            sudo docker rmi anifarm_deploy_web 2>/dev/null || true
            
            # Docker 이미지 빌드
            sudo docker build --no-cache -t anifarm_deploy_web .
            
            # 컨테이너 실행
            sudo docker run -d \
              --name anifarm_deploy_web \
              -p 8000:8000 \
              -v $(pwd)/.env:/app/.env \
              anifarm_deploy_web
            
            # 컨테이너 로그 확인
            sudo docker logs anifarm_deploy_web
          '





