name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: yooingyu
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: yooingyu/anifarm:latest
          cache-from: type=registry,ref=yooingyu/anifarm:buildcache
          cache-to: type=registry,ref=yooingyu/anifarm:buildcache,mode=max
          build-args: |
            DOCKERHUB_USERNAME=yooingyu

      - name: Check Docker images
        run: docker images

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create SSH directory
        run: mkdir -p ~/.ssh/

      - name: Store SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH connection
        run: ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          DOCKERHUB_USERNAME: yooingyu
        run: |
          # EC2에 Docker와 Nginx 설치
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            # Docker 설치
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose
              sudo usermod -aG docker ubuntu
            fi
            
            # Nginx 설치 및 설정
            if ! command -v nginx &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y nginx
            fi

            # Nginx 설정
            sudo tee /etc/nginx/sites-available/default > /dev/null << "EOL"
            server {
                listen 80;
                server_name _;

                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_read_timeout 300;
                    proxy_connect_timeout 300;
                    proxy_send_timeout 300;
                }
            }
            EOL

            # Nginx 설정 테스트 및 재시작
            sudo nginx -t && sudo systemctl restart nginx
          '

          # 필요한 디렉토리 구조 생성
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            rm -rf ~/app_deploy &&
            mkdir -p ~/app_deploy &&
            mkdir -p ~/app_deploy/pricepython/models/carrot &&
            mkdir -p ~/app_deploy/pricepython/models &&
            mkdir -p ~/app_deploy/pricepython
          '

          # docker-compose.yml 파일 전송
          scp -i ~/.ssh/id_rsa -o ConnectTimeout=10 docker-compose.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app_deploy/

          # Docker 배포 실행
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            cd ~/app_deploy &&
            echo "$ENV_FILE" > .env &&
            sudo chown ubuntu:ubuntu .env &&
            docker-compose down || true &&
            docker system prune -af --volumes || true &&
            docker-compose pull &&
            docker-compose up -d &&
            sleep 5 &&
            docker logs app_deploy_web_1
          '





