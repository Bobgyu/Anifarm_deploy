name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Create SSH directory
        run: |
          mkdir -p ~/.ssh/
          chmod 700 ~/.ssh/
          echo "SSH directory created"

      - name: Store SSH key
        run: |
          echo "Storing SSH key..."
          # SSH 키 저장 전 디렉토리 확인
          ls -la ~/.ssh/
          
          # SSH 키 저장
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          
          # Windows 줄바꿈 문자 제거
          sed -i 's/\r$//' ~/.ssh/id_rsa
          
          # 키 파일 권한 설정
          chmod 600 ~/.ssh/id_rsa
          echo "SSH key stored with permissions 600"
          
          # 키 파일 내용 확인
          echo "Checking SSH key format..."
          head -n 1 ~/.ssh/id_rsa
          echo "First line of SSH key printed"
          
          # 키 파일 유효성 검사
          echo "Validating SSH key..."
          ssh-keygen -l -f ~/.ssh/id_rsa
          
          # known_hosts 설정
          echo "Adding host to known_hosts..."
          mkdir -p ~/.ssh
          touch ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "Host: ${{ secrets.EC2_HOST }}"
          
          # 호스트 연결 테스트
          echo "Testing host connectivity..."
          ping -c 4 ${{ secrets.EC2_HOST }}
          
          # 포트 확인
          echo "Checking SSH port..."
          nc -zv ${{ secrets.EC2_HOST }} 22
          
          # SSH 키스캔 시도
          echo "Attempting SSH keyscan..."
          ssh-keyscan -v -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
          # known_hosts 파일 확인
          echo "Known hosts content:"
          cat ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "Known hosts updated"
          
          # 최종 디렉토리 상태 확인
          ls -la ~/.ssh/
          
          # SSH 연결 테스트
          echo "Testing SSH connection..."
          echo "Host: ${{ secrets.EC2_HOST }}"
          echo "Username: ${{ secrets.EC2_USERNAME }}"
          ssh -v -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'echo "SSH connection successful"'
          
          # 연결 실패 시 추가 정보 출력
          if [ $? -ne 0 ]; then
            echo "SSH connection failed"
            echo "Checking network connectivity..."
            ping -c 4 ${{ secrets.EC2_HOST }}
            echo "Checking SSH service..."
            nc -zv ${{ secrets.EC2_HOST }} 22
            echo "Checking SSH key permissions..."
            ls -la ~/.ssh/
            echo "Checking known_hosts content..."
            cat ~/.ssh/known_hosts
          fi

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          ENV_FILE: ${{ secrets.ENV_FILE }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          EMAIL: ${{ secrets.EMAIL }}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          WEATHER_API_KEY: ${{ secrets.WEATHER_API_KEY }}
          KMA_API_KEY: ${{ secrets.KMA_API_KEY }}
          KAMIS_API_KEY: ${{ secrets.KAMIS_API_KEY }}
          DATAENCODING_API_KEY: ${{ secrets.DATAENCODING_API_KEY }}
          DATADECODING_API_KEY: ${{ secrets.DATADECODING_API_KEY }}
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          MAIL_FROM: ${{ secrets.MAIL_FROM }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_SERVER: ${{ secrets.MAIL_SERVER }}
          YOUNG_API_KEY: ${{ secrets.YOUNG_API_KEY }}
          INFOMATION_API_KEY: ${{ secrets.INFOMATION_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
        run: |
          # EC2에 접속하여 Docker 설치 및 설정
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=10 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} '
            # Docker 설치
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            
            # Docker Compose 설치
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # Docker 서비스 시작 및 자동 시작 설정
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # 현재 사용자를 docker 그룹에 추가
            sudo usermod -aG docker $USER
            
            # 디스크 공간 확인
            df -h
            
            # Docker 서비스 중지
            sudo systemctl stop docker || true
            sudo systemctl stop docker.socket || true
            
            # Docker 관련 모든 데이터 정리
            sudo docker system prune -a --volumes --force
            
            # Docker 디렉토리 삭제 및 재생성
            sudo rm -rf /var/lib/docker
            sudo mkdir -p /var/lib/docker
            sudo chown -R root:root /var/lib/docker
            sudo chmod -R 711 /var/lib/docker
            
            # 스왑 파일 비활성화 및 제거
            sudo swapoff /swapfile 2>/dev/null || true
            sudo rm -f /swapfile
            
            # 시스템 정리
            sudo apt-get clean
            sudo apt-get autoremove -y
            sudo rm -rf /var/lib/apt/lists/*
            sudo rm -rf /var/cache/apt/archives/*
            sudo rm -rf /var/cache/apt/lists/*
            sudo rm -rf /var/tmp/*
            sudo rm -rf /tmp/*
            sudo rm -rf /var/log/*.gz
            sudo rm -rf /var/log/journal/*
            sudo rm -rf /var/cache/*
            
            # Docker 서비스 재시작
            sudo systemctl start docker
            
            # Docker Hub 로그인
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            
            # 기존 컨테이너와 이미지 정리
            docker stop $(docker ps -aq) 2>/dev/null || true
            docker rm $(docker ps -aq) 2>/dev/null || true
            docker rmi yooingyu/anifarm:latest 2>/dev/null || true
            
            # 작업 디렉토리로 이동
            cd ~/app_deploy/back
            
            # 환경 변수 파일 생성 및 권한 설정
            echo "$ENV_FILE" > .env
            chown ubuntu:ubuntu .env
            chmod 600 .env
            
            # Docker 이미지 가져오기
            docker pull --platform linux/amd64 yooingyu/anifarm:latest
            
            # 컨테이너 실행
            docker-compose -f docker-compose.yml up -d
            
            # 컨테이너 로그 확인
            docker logs anifarm_deploy_web
            
            # 디스크 공간 확인
            df -h
          '