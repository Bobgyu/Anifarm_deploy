name: Deploy to EC2


on:
  push:
    branches:
      - main
  workflow_dispatch:


jobs:
  deploy:
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v2


      - name: Create SSH directory
        run: mkdir -p ~/.ssh/


      - name: Store SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts


      - name: Deploy to EC2
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          # .env 파일 생성
          if [ -f env ]; then
              sudo mv env .env
              sudo chown ubuntu:ubuntu .env
              echo ".env file created from env file"
          elif [ -f .env ]; then
              sudo chown ubuntu:ubuntu .env
              echo ".env file already exists"
          else
              # GitHub Actions에서 전달받은 ENV_FILE 내용을 그대로 사용
              echo "$ENV_FILE" > .env
              sudo chown ubuntu:ubuntu .env
              echo "New .env file created from GitHub Actions secret"
          fi
          
          # 임시 배포 디렉토리 생성
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} 'mkdir -p ~/app_deploy'


          # 파일 전송
          scp -i ~/.ssh/id_rsa -r ./* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app_deploy/


          # 배포 스크립트 실행 (환경 변수 전달)
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
            cd ~/app_deploy &&
            chmod +x deploy.sh &&
            ENV_FILE='$ENV_FILE' bash deploy.sh
          "




